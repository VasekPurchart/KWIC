
% % bare_conf.tex % V1.3 % 2007/01/11 % by Michael Shell % See: %
% http://www.michaelshell.org/ % for current contact information. % % This is a
% skeleton file demonstrating the use of IEEEtran.cls % (requires IEEEtran.cls
% version 1.7 or later) with an IEEE conference paper. % % Support sites: %
% http://www.michaelshell.org/tex/ieeetran/ %
% http://www.ctan.org/tex-archive/macros/latex/contrib/IEEEtran/ % and %
% http://www.ieee.org/

% %************************************************************************* %
% Legal Notice: % This code is offered as-is without any warranty either
% expressed or % implied; without even the implied warranty of MERCHANTABILITY or
% % FITNESS FOR A PARTICULAR PURPOSE! % User assumes all risk. % In no event
% shall IEEE or any contributor to this code be liable for % any damages or
% losses, including, but not limited to, incidental, % consequential, or any
% other damages, resulting from the use or misuse % of any information contained
% here. % % All comments are the opinions of their respective authors and are not
% % necessarily endorsed by the IEEE. % % This work is distributed under the
% LaTeX Project Public License (LPPL) % ( http://www.latex-project.org/ ) version
% 1.3, and may be freely used, % distributed and modified. A copy of the LPPL,
% version 1.3, is included % in the base LaTeX documentation of all distributions
% of LaTeX released % 2003/12/01 or later. % Retain all contribution notices and
% credits. % ** Modified files should be clearly indicated as such, including  **
% % ** renaming them and changing author support contact information. ** % % File
% list of work: IEEEtran.cls, IEEEtran_HOWTO.pdf, bare_adv.tex, %                
%    bare_conf.tex, bare_jrnl.tex, bare_jrnl_compsoc.tex
% %*************************************************************************

% *** Authors should verify (and, if needed, correct) their LaTeX system  *** ***
% with the testflow diagnostic prior to trusting their LaTeX platform *** ***
% with production work. IEEE's font choices can trigger bugs that do  *** *** not
% appear when using other class files.                            *** The
% testflow support page is at: http://www.michaelshell.org/tex/testflow/



% Note that the a4paper option is mainly intended so that authors in countries
% using A4 can easily print to A4 and see how their papers will look in print -
% the typesetting of the document will not typically be affected with changes in
% paper size (but the bottom and side margins will). Use the testflow package
% mentioned above to verify correct handling of both paper sizes by the user's
% LaTeX system.  Also note that the "draftcls" or "draftclsnofoot", not "draft",
% option should be used if it is desired that the figures are to be displayed in
% draft mode.
\documentclass[a4paper,conference]{IEEEtran}
% Add the compsoc option for Computer Society conferences.  If IEEEtran.cls has
% not been installed into the LaTeX system files, manually specify the path to it
% like: \documentclass[conference]{../sty/IEEEtran}





% Some very useful LaTeX packages include: (uncomment the ones you want to load)


% *** MISC UTILITY PACKAGES ***  \usepackage{ifpdf} Heiko Oberdiek's ifpdf.sty is
% very useful if you need conditional compilation based on whether the output is
% pdf or dvi. usage: \ifpdf % pdf code \else % dvi code \fi The latest version of
% ifpdf.sty can be obtained from:
% http://www.ctan.org/tex-archive/macros/latex/contrib/oberdiek/ Also, note that
% IEEEtran.cls V1.7 and later provides a builtin \ifCLASSINFOpdf conditional that
% works the same way. When switching from latex to pdflatex and vice-versa, the
% compiler may have to be run twice to clear warning/error messages.






% *** CITATION PACKAGES ***  \usepackage{cite} cite.sty was written by Donald
% Arseneau V1.6 and later of IEEEtran pre-defines the format of the cite.sty
% package \cite{} output to follow that of IEEE. Loading the cite package will
% result in citation numbers being automatically sorted and properly
% "compressed/ranged". e.g., [1], [9], [2], [7], [5], [6] without using cite.sty
% will become [1], [2], [5]--[7], [9] using cite.sty. cite.sty's \cite will
% automatically add leading space, if needed. Use cite.sty's noadjust option
% (cite.sty V3.8 and later) if you want to turn this off. cite.sty is already
% installed on most LaTeX systems. Be sure and use version 4.0 (2003-05-27) and
% later if using hyperref.sty. cite.sty does not currently provide for
% hyperlinked citations. The latest version can be obtained at:
% http://www.ctan.org/tex-archive/macros/latex/contrib/cite/ The documentation is
% contained in the cite.sty file itself.






% *** GRAPHICS RELATED PACKAGES ***
\ifCLASSINFOpdf

	\usepackage{listings}
	\usepackage[pdftex]{graphicx}
	  % declare the path(s) where your graphic files are
	\graphicspath{{../pdf/}{../jpeg/}{../png/}{../eps/}}
	  % and their extensions so you won't have to specify these with every instance
	  % of \includegraphics
	\DeclareGraphicsExtensions{.pdf,.jpeg,.png,.eps}
\else
	\usepackage[dvips]{graphicx}
	\usepackage{listings}
	\graphicspath{{../eps/}}
	\DeclareGraphicsExtensions{.eps}
	
	
	\usepackage{float}
	
	\floatstyle{ruled}
	\newfloat{program}{thp}{lop}
	\floatname{program}{Listing}

  % or other class option (dvipsone, dvipdf, if not using dvips). graphicx will
  % default to the driver specified in the system graphics.cfg if no driver is
  % specified. \usepackage[dvips]{graphicx} declare the path(s) where your
  % graphic files are \graphicspath{{../eps/}} and their extensions so you won't
  % have to specify these with every instance of \includegraphics
  % \DeclareGraphicsExtensions{.eps}
\fi
% graphicx was written by David Carlisle and Sebastian Rahtz. It is required if
% you want graphics, photos, etc. graphicx.sty is already installed on most LaTeX
% systems. The latest version and documentation can be obtained at:
% http://www.ctan.org/tex-archive/macros/latex/required/graphics/ Another good
% source of documentation is "Using Imported Graphics in LaTeX2e" by Keith
% Reckdahl which can be found as epslatex.ps or epslatex.pdf at:
% http://www.ctan.org/tex-archive/info/  latex, and pdflatex in dvi mode, support
% graphics in encapsulated postscript (.eps) format. pdflatex in pdf mode
% supports graphics in .pdf, .jpeg, .png and .mps (metapost) formats. Users
% should ensure that all non-photo figures use a vector format (.eps, .pdf, .mps)
% and not a bitmapped formats (.jpeg, .png). IEEE frowns on bitmapped formats
% which can result in "jaggedy"/blurry rendering of lines and letters as well as
% large increases in file sizes.  You can find documentation about the pdfTeX
% application at: http://www.tug.org/applications/pdftex





% *** MATH PACKAGES ***  \usepackage[cmex10]{amsmath} A popular package from the
% American Mathematical Society that provides many useful and powerful commands
% for dealing with mathematics. If using it, be sure to load this package with
% the cmex10 option to ensure that only type 1 fonts will utilized at all point
% sizes. Without this option, it is possible that some math symbols, particularly
% those within footnotes, will be rendered in bitmap form which will result in a
% document that can not be IEEE Xplore compliant!  Also, note that the amsmath
% package sets \interdisplaylinepenalty to 10000 thus preventing page breaks from
% occurring within multiline equations. Use: \interdisplaylinepenalty=2500 after
% loading amsmath to restore such page breaks as IEEEtran.cls normally does.
% amsmath.sty is already installed on most LaTeX systems. The latest version and
% documentation can be obtained at:
% http://www.ctan.org/tex-archive/macros/latex/required/amslatex/math/





% *** SPECIALIZED LIST PACKAGES ***  \usepackage{algorithmic} algorithmic.sty was
% written by Peter Williams and Rogerio Brito. This package provides an
% algorithmic environment fo describing algorithms. You can use the algorithmic
% environment in-text or within a figure environment to provide for a floating
% algorithm. Do NOT use the algorithm floating environment provided by
% algorithm.sty (by the same authors) or algorithm2e.sty (by Christophe Fiorio)
% as IEEE does not use dedicated algorithm float types and packages that provide
% these will not provide correct IEEE style captions. The latest version and
% documentation of algorithmic.sty can be obtained at:
% http://www.ctan.org/tex-archive/macros/latex/contrib/algorithms/ There is also
% a support site at: http://algorithms.berlios.de/index.html Also of interest may
% be the (relatively newer and more customizable) algorithmicx.sty package by
% Szasz Janos: http://www.ctan.org/tex-archive/macros/latex/contrib/algorithmicx/




% *** ALIGNMENT PACKAGES ***  \usepackage{array} Frank Mittelbach's and David
% Carlisle's array.sty patches and improves the standard LaTeX2e array and
% tabular environments to provide better appearance and additional user controls.
% As the default LaTeX2e table generation code is lacking to the point of almost
% being broken with respect to the quality of the end results, all users are
% strongly advised to use an enhanced (at the very least that provided by
% array.sty) set of table tools. array.sty is already installed on most systems.
% The latest version and documentation can be obtained at:
% http://www.ctan.org/tex-archive/macros/latex/required/tools/


% \usepackage{mdwmath} \usepackage{mdwtab} Also highly recommended is Mark
% Wooding's extremely powerful MDW tools, especially mdwmath.sty and mdwtab.sty
% which are used to format equations and tables, respectively. The MDWtools set
% is already installed on most LaTeX systems. The lastest version and
% documentation is available at:
% http://www.ctan.org/tex-archive/macros/latex/contrib/mdwtools/


% IEEEtran contains the IEEEeqnarray family of commands that can be used to
% generate multiline equations as well as matrices, tables, etc., of high
% quality.


% \usepackage{eqparbox} Also of notable interest is Scott Pakin's eqparbox
% package for creating (automatically sized) equal width boxes - aka "natural
% width parboxes". Available at:
% http://www.ctan.org/tex-archive/macros/latex/contrib/eqparbox/





% *** SUBFIGURE PACKAGES *** \usepackage[tight,footnotesize]{subfigure}
% subfigure.sty was written by Steven Douglas Cochran. This package makes it easy
% to put subfigures in your figures. e.g., "Figure 1a and 1b". For IEEE work, it
% is a good idea to load it with the tight package option to reduce the amount of
% white space around the subfigures. subfigure.sty is already installed on most
% LaTeX systems. The latest version and documentation can be obtained at:
% http://www.ctan.org/tex-archive/obsolete/macros/latex/contrib/subfigure/
% subfigure.sty has been superceeded by subfig.sty.



% \usepackage[caption=false]{caption} \usepackage[font=footnotesize]{subfig}
% subfig.sty, also written by Steven Douglas Cochran, is the modern replacement
% for subfigure.sty. However, subfig.sty requires and automatically loads Axel
% Sommerfeldt's caption.sty which will override IEEEtran.cls handling of captions
% and this will result in nonIEEE style figure/table captions. To prevent this
% problem, be sure and preload caption.sty with its "caption=false" package
% option. This is will preserve IEEEtran.cls handing of captions. Version 1.3
% (2005/06/28) and later (recommended due to many improvements over 1.2) of
% subfig.sty supports the caption=false option directly:
% \usepackage[caption=false,font=footnotesize]{subfig}  The latest version and
% documentation can be obtained at:
% http://www.ctan.org/tex-archive/macros/latex/contrib/subfig/ The latest version
% and documentation of caption.sty can be obtained at:
% http://www.ctan.org/tex-archive/macros/latex/contrib/caption/




% *** FLOAT PACKAGES ***  \usepackage{fixltx2e} fixltx2e, the successor to the
% earlier fix2col.sty, was written by Frank Mittelbach and David Carlisle. This
% package corrects a few problems in the LaTeX2e kernel, the most notable of
% which is that in current LaTeX2e releases, the ordering of single and double
% column floats is not guaranteed to be preserved. Thus, an unpatched LaTeX2e can
% allow a single column figure to be placed prior to an earlier double column
% figure. The latest version and documentation can be found at:
% http://www.ctan.org/tex-archive/macros/latex/base/



% \usepackage{stfloats} stfloats.sty was written by Sigitas Tolusis. This package
% gives LaTeX2e the ability to do double column floats at the bottom of the page
% as well as the top. (e.g., "\begin{figure*}[!b]" is not normally possible in
% LaTeX2e). It also provides a command: \fnbelowfloat to enable the placement of
% footnotes below bottom floats (the standard LaTeX2e kernel puts them above
% bottom floats). This is an invasive package which rewrites many portions of the
% LaTeX2e float routines. It may not work with other packages that modify the
% LaTeX2e float routines. The latest version and documentation can be obtained
% at: http://www.ctan.org/tex-archive/macros/latex/contrib/sttools/ Documentation
% is contained in the stfloats.sty comments as well as in the presfull.pdf file.
% Do not use the stfloats baselinefloat ability as IEEE does not allow
% \baselineskip to stretch. Authors submitting work to the IEEE should note that
% IEEE rarely uses double column equations and that authors should try to avoid
% such use. Do not be tempted to use the cuted.sty or midfloat.sty packages (also
% by Sigitas Tolusis) as IEEE does not format its papers in such ways.





% *** PDF, URL AND HYPERLINK PACKAGES ***  \usepackage{url} url.sty was written
% by Donald Arseneau. It provides better support for handling and breaking URLs.
% url.sty is already installed on most LaTeX systems. The latest version can be
% obtained at: http://www.ctan.org/tex-archive/macros/latex/contrib/misc/ Read
% the url.sty source comments for usage information. Basically,
% \url{my_url_here}.





% *** Do not adjust lengths that control margins, column widths, etc. *** *** Do
% not use packages that alter fonts (such as pslatex).         *** There should
% be no need to do such things with IEEEtran.cls V1.6 and later. (Unless
% specifically asked to do so by the journal or conference you plan to submit to,
% of course. )

\def\IEEEkeywordsname{Keywords}
% correct bad hyphenation here
\hyphenation{op-tical net-works semi-conduc-tor credit-card-number}

\newcommand{\fig}[1]{Fig.~\ref{fig:#1}}      % abstract for figures

\newcommand{\Sec}[1]{Section~\ref{sec:#1}}  

\newcommand{\listing}[1]{Listing~\ref{listing:#1}}  

\newcommand{\tab}[1]{Table~\ref{tab:#1}}      % abstract for figures


\begin{document}
%  paper title can use linebreaks \\ within to get better formatting as desired
\title{A Profile Approach to Using UML Models for Rich Form Generation}


% author names and affiliations use a multiple column layout for up to three
% different affiliations
\author{\IEEEauthorblockN{Tomas Cerny}
\IEEEauthorblockA{Department of Computer Science and Engineering\\
Czech Technical University\\
Prague, Czech Republic\\
cernyto3@fel.cvut.cz} \and
\IEEEauthorblockN{Eunjee Song}
\IEEEauthorblockA{Department of Computer Science\\
Baylor University\\
Waco, TX, USA\\
eunjee\_song@baylor.edu}}

% conference papers do not typically use \thanks and this command is locked out
% in conference mode. If really needed, such as for the acknowledgment of grants,
% issue a \IEEEoverridecommandlockouts after \documentclass

% for over three affiliations, or if they all won't fit within the width of the
% page, use this alternative format:  \author{\IEEEauthorblockN{Michael
% Shell\IEEEauthorrefmark{1}, Homer Simpson\IEEEauthorrefmark{2}, James
% Kirk\IEEEauthorrefmark{3}, Montgomery Scott\IEEEauthorrefmark{3} and Eldon
% Tyrell\IEEEauthorrefmark{4}}
%\IEEEauthorblockA{\IEEEauthorrefmark{1}School of Electrical and Computer Engineering\\
% Georgia Institute of Technology, Atlanta, Georgia 30332--0250\\ Email: see
% http://www.michaelshell.org/contact.html}
%\IEEEauthorblockA{\IEEEauthorrefmark{2}Twentieth Century Fox, Springfield, USA\\
% Email: homer@thesimpsons.com}
%\IEEEauthorblockA{\IEEEauthorrefmark{3}Starfleet Academy, San Francisco, California 96678-2391\\
% Telephone: (800) 555--1212, Fax: (888) 555--1212}
% \IEEEauthorblockA{\IEEEauthorrefmark{4}Tyrell Inc., 123 Replicant Street, Los
% Angeles, California 90210--4321}}




% use for special paper notices \IEEEspecialpapernotice{(Invited Paper)}




% make the title area
\maketitle


\begin{abstract}
%\boldmath
The Model Driven Development (MDD) has provided a new way of engineering today's 
rapidly changing requirements into the implementation. However, the development 
of user interface (UI) part of an application has not benefit much from MDD 
although today's UIs are complex software components and they play an
essential role in the usability of an application. As one of the most common UI
examples, consider view forms that are used for collecting
data from the user. View forms are usually generated with a lot of manual efforts after the
implementation. For example, in case of  Java 2 Enterprise Edition (Java EE) 
web applications, developers create all view forms manually by referring to entity 
beans to determine the content of forms, but such manual creation is pretty 
    tedious and certainly very much error-prone and makes the system maintenance
     difficult. One promise in MDD is that we can generate code from UML 
     models. Existing design models in MDD, however, cannot provide all class 
     attributes that are required to generate the practical code of UI fragments. 
     In this paper, we propose a UML profile for view form generation as an 
     extension of the object relational mapping (ORM) profile. A profile 
     form of hibernate validator is also introduced to implement the practical
      view form generation that includes an user input validation.
\end{abstract}
% IEEEtran.cls defaults to using nonbold math in the Abstract.
% This preserves the distinction between vectors and scalars. However,
% if the conference you are submitting to favors bold math in the abstract,
% then you can use LaTeX's standard command \boldmath at the very start
% of the abstract to achieve this. Many IEEE journals/conferences frown on
% math in the abstract anyway.

% no keywords
\begin{IEEEkeywords}
Keywords: UML User Interface Modeling, Model Driven Development, Profile, Code Generation 
\end{IEEEkeywords}


% For peer review papers, you can put extra information on the cover
% page as needed:
% \ifCLASSOPTIONpeerreview
% \begin{center} \bfseries EDICS Category: 3-BBND \end{center}
% \fi
%
% For peerreview papers, this IEEEtran command inserts a page break and
% creates the second title. It will be ignored for other modes.
\IEEEpeerreviewmaketitle



\section{Introduction}
% no \IEEEPARstart
The main idea behind the model-driven development (MDD) is that models, rather
than code, should be the primary artifact where most of software development and
maintenance activities are centered. Despite all its advantages, model-based user
interface tools (e.g., \cite{MDATools:Medina, UIEngInMDA:Jespersen}) have not
been widely used in practice \cite{UIGenAndTools:Nichols}. In many cases, the
user interfaces (UIs) are manually created by developers who are usually very
much familiar with the current implementation. The manual development like this
could work initially for small scale applications,  but is not desirable when the
system is under maintenance or should evolve for changes. The problem with manual
UI creation becomes worse when the code fragments have been generated using a
model-driven tool because manually added code makes the maintenance within MDA,
which aims that any future changes in design also propagate to all generated
fragments, difficult. Therefore, there is a need to integrate the required UI
code fragment information within design models. Many UML tools that are currently
available, however, do not support one to include properties necessary for the UI
code fragment generation in the underlying design models.

\begin{figure}[!b]
\centering
\includegraphics[width=2.1in]{1-PersonCarSimple}
\caption{A UML class model example}
\label{fig:PersonCarSimple}
\end{figure}
 

\begin{figure}[!b]
\centering
\framebox{
\includegraphics[width=2.7in]{2-exmaple2}
}

\caption{A view form generated from a conventional design model (with validation)}
\label{fig:exampleSimple}
\end{figure}
 


For example, consider a UML design model shown in \fig{exampleSimple}. We
want to build a view form for a Java EE web application from it and each input
should be validated when it is collected through the form. An example view form like one given in \fig{exampleSimple} can be generated for {\em Person} class
using the information currently given in \fig{PersonCarSimple}. However, such a
form has the limited capability in detecting the meaning of fields and in
validating user inputs because the given design model does not provide any form
generation rules with validation details other than field types. Other problems
in the current form generation can be summarized as follows. We might want to
have some fields in a different order, e.g., the current date should be given
before a person's birth date. An input to the email address field can be invalid, {\em
http} link can be malformed, or there can be a negative value given to the salary
filed. In addition, the current form includes the field like {\em id} that should
be assigned by the system not by the user. Consequently this is not a view form
that was expected. Therefore, we often generate an initial code for the form first and
then add additional constraints and validation rules to each field in the form
and reorder the fields. \fig{exampleRich} shows a form that can be generated by
this additional modification. One of main problems in this kind of form
generation process is that changes on the design model cannot be automatically
applied to the form that was originally generated. Therefore, one needs to modify
all related view forms and their underlying entities including database. To avoid
this error-prone and tedious work, we propose a way to add the form generation
details with validation rules to the design models so that they can be used to
auto-generate the view forms with proper user input validation (UIV).



\begin{figure}[!t]
\centering
\framebox{
\includegraphics[width=2.7in]{3-exampleRich}
}
\caption{A view form that we want to create (with validation)}
\label{fig:exampleRich}
\end{figure}

% Our goal in this paper is to generate user interface fragments\footnote{We focus
% on rich view forms in this work since they reflect the data model. A form example
% is shown later in \fig{exampleSimple} and \fig{exampleRich}.} and automated UIV
% directly from design models using UML profiles and conventional code development libraries.
% These profiles enable us to generate more rich user interfaces. So the human
% designer can generate code fragments he expects and receive all benefits of 
% code generation \cite{UIEngInMDA:Jespersen}. The most important fragments from the user
% interface and human computer interaction are view forms. View forms that integrate validation
% and simplify its use for user we call rich forms. Integration of validation in 
% forms assists to user when filling the data and improves the application 
% usability. In fact usability is improved twice, because the code fragments 
% generated from the design model apply an uniform strategy. If an user can 
% finish a task within some scope, he can expect similar system interaction for
% another scope.
% 
% 
% 
% 
% 
% 
% In this paper we show an approach to bridging gaps between the object relational
% mapping (ORM), UIV and form generation successfully used in code
% development for many years. We promote the code development trends to the
% model-driven which provide benefits to most of the current code developers and
% the whole model-driven community. We extend the Model-driven Java
% Persistence API \cite{UMLProfile:Torres} (MD-JPA) profile that is an UML
% profile for ORM. We show that such a step is very useful and to add few more details will allow us to benefit from
% input validation and rich view form generation.
% 
% 
% 
% The main contribution of this paper are UML profiles for ORM, UIV
% and form generation that implement model extensions and can be applied by
% standard UML design tools. We evaluate these profiles on Enterprise Architect
% \cite{EA}. We also show the parallel between ORM, UIV and view forms.
% Defined profiles allow us to generate the source code that uses common
% libraries, e.g., Open JPA, TopLink or Hibernate for Java Persistence API (JPA) [21], Hibernate
% Validator (HBV) \cite{HBV} or FormBuilder (FB) \cite{FormB:Cerny}  and may
% motivate code developers to use model-driven development receiving all its benefits. A tool capable to generate
% rich view forms is provided with a widget library for Java Server Faces (JSF)
% applications.

UIV is critical to application security and is required in every application
interacting with users. Validation should happen at the server-side but for
usability purposes is often needed at the client-side as well. Various
validation libraries are available such as Hibernate Validator (HBV) \cite{HBV}. This
validator expects application to use Object Relational Mapping (ORM) and extends
its capabilities. The use of ORM is a common practice in software development
nowadays. Many ORM libraries like Open JPA \cite{JPA:OpenJPA}, TopLink
\cite{JPA:Top} or Hibernate \cite{JPA:Hibernate} are available for its
popularity. These ORM frameworks follow the Java Persistence API (JPA) standard \cite{JSR:DeMichiel}. ORM entities, although in lower layers, also
determine the content of view forms where also UIV comes in place. Unfortunately
there exists a gap between forms and entities where the data and validation rules
are defined twice. One promising approach to reduce the gap brings form
auto-generation \cite{FormB:Cerny} that requires to apply addition extension at
the JPA entities .
%FormBuilder (FB)
%\cite{FormB:Cerny} is a tool capable to generate forms. 

In this paper we show an approach to bridging gaps between the ORM, UIV and form
generation. We promote the code development trends to the model-driven
development by defining UML profiles for ORM \cite{UMLProfile:Torres}, UIV and form generation.
These profiles implement model extensions and can be applied to standard UML
design tools. Our goal is to generate user interface fragments\footnote{We focus
on rich view forms in this work since they reflect the data model. A form
example is shown later in \fig{exampleSimple} and \fig{exampleRich}.} and automated UIV
directly from design models using UML profiles and common development libraries\footnote{Such as JPA, HBV or FormBuilder (FB) \cite{FormB:Cerny}}. A tool
capable of rich form\footnote{A form that integrates UIV}
generation is provided with a widget library for Java Server Faces (JSF). We
believe to motivate code developers to use model-driven development receiving all
its benefits of code generation \cite{UIEngInMDA:Jespersen}.
%\newcommand{\Sec}[1]{Section~\ref{sec:#1}}  
%\newcommand{\fig}[1]{Fig.~\ref{fig:#1}}   

Our paper is organized as follows: in \Sec{Background}
we look into the background and introduce model driven architecture. In \Sec{Motivation} 
we provide a motivation of our approach introducing a tool we built for form
generation. \Sec{Profiles} introduces UML profiles for class model extension
to capture additional information and puts together the form generation tool with defined UML
profiles. It is followed by a case study \Sec{Study} that should enlightenthe profile usage. The paper provides a broad discussion of related work in\Sec{Related} and conclusion.

\section{Background}
\label{sec:Background}

Software development is complicated process influenced by internal
policy, experiences, expectations or requirements on the software
\cite{Req:Nuseibeh,ReqEng:Zave}. Many software projects have a lot in common which was a motivation for creation of design
Simplification with unification brought the Unified Modeling Language (UML)
\cite{OMGUML} which is popular and widely used language, that is
taught in most universities around the world and every software engineer knows at least its subset.
Language UML is under international, non-profit computer industry consortium
Object Management Group (OMG) \cite{OMGUML}. This group provides enterprise integration standards for a many various broadly used technologies. OMG'smodeling standards include not only UML but also new development directioncalled Model Driven Architecture (MDA) \cite{MDA:Kleppe}.

% \begin{figure}[!t]
% \centering
% \includegraphics[width=2.7in]{4-MDA.png}
% \caption{OMG Model-Driven Architecture (MDA)}
% \label{fig:MDA}
% \end{figure}

In the past, a software development team used a middleware that was matching
their project requirements. A problem with such a development direction is with
product compatibility with various operating systems, with
later compatibility with another middleware or just with customer's later
requirements. MDA provides a solution by middleware independence that is
achieved by the strength of UML which provides models that are platform independent and platform specific.


Models in MDA are syntactically and semantically described by meta-models,
other-words meta-model is an instrument for model language definition. Similar to
syntactic and semantic analyzer, meta-modeling describes every element of a model
language that can be used by the language. An example for UML class
diagram is that we use elements like classes, attributes and
associations. UML meta-model then defines all the properties and characteristics for every model
language element. Since a meta-model is also a model that needs to be described,
it has it's meta-model that describes its semantics. Language of meta-model is
called meta-language.  Meta-language is different from a modeling language
because it is used to describe modeling languages.


%  OMG uses four-layered architecture for MDA framework. Layers are called M0, M1,
%  M2 and M3 where M0 describes behavior of instances (object model), M1 describes
%  the system model (class model), M2 is a model of the M1 model describing
%  classes, attributes and associations, where every element of M1 is an instance
%  of an M2 element and finally M3 is a model of the M2 model where also every
%  element of M2 is an instance of an M3 element. OMG defines Meta-object facility
%  (MOF) \cite{OMGUML} that is the standard M3 language. The
%  architecture is shown by \fig{MDA}.
% 
% 
% 
% MDA approach spreads also to human computer interaction (HCI). Separation of
% concerns in MDA is one of the motivations for its use. Unfortunately such a separation does not exist for HCI
% \cite{UIEngInMDA:Jespersen}. Usually, every aspect of a system has a potential to
% impact its users.


We mentioned that UML models are not capable to capture all information we need.
There are constructions to use to make the models suitable for capturing all
details we need, either we can use Constraints package in UML infrastructure or
define UML profiles \cite{OMGUML, MDAEeb:Moreno}.
Profile package contains mechanisms that allow extending meta-classes from existing
meta-models. Profiles were defined for extending UML standard. UML profile is a
package that has stereotypes as a specific meta-classes and tagged values
meta-attributes. Stereotypes in UML reflect code annotations, and tagged
values reflect annotation attributes. A majority of programming languages has
some form of annotations for additional information or constraints
that apply in given contexts. Annotations were defined as a way from a large
amount of XML configurations. Annotations in UML can be represented also as a
normal modeling elements \cite{AttrUML:Cepa} that provide more modeling
possibilities than stereotypes.



\section{Motivation}
\label{sec:Motivation}

Modern trends of application development go the direction from data model over
the behavioral model to the user interface. First the database schema is defined,
then a class model is built where we deal with ORM issues. The JPA is a standard
that helps us with this mapping. It is a work of community process involving
experts from various parts of industry dealing with ORM frameworks for Java
platform. JPA annotations are relevant to the ORM and to persistence.
Annotations are used for entities, their attributes, associations, inheritance, etc.
Promotion of JPA to the model-driven approach was the goal of
\cite{UMLProfile:Torres}. Once the mapping is finished the behavior comes in
place. Many frameworks define controllers, managers or beans that deal with
behavior. The presentation is the last step in the development process. It also
means that presentation is dependent on the underlying code. If we focus on user
interaction with a software application, we see that user invokes actions, and
submits data. Data submission goes through forms and the input data must go
through a validation. Validation is a standard process that must happen before
the data persistence. One of the most popular frameworks for ORM - Hibernate
provides a validation library HBV that takes care of data validation by
annotating the data field.
% These annotations are similar to the ones in JPA, but provide more broad
% options that apply for data validation.
The similarity of annotations in JPA and HBV raises a question if we could
integrate these somehow for view form generation and make view forms derive the
information from entity attributes and its annotation constrains. We could, and
it can make our forms more capable, because attributes will know what data inputs
to expect. View forms, however, have more restrictions than what is already
defined by JPA and HBV. For example we use a string field once as short input
text, another time as text area, somewhere as password, html, or http link. We
also need to derive proper order for the form elements.


Our previous work \cite{FormB:Cerny} focused on validating
data and generating view forms from JPA entity using the HBV. We explored dependencies
between entity and view form fields. An entity field partially
determines the type of an input element used in a form. A proper view form input
element is chosen based on the field type and its additional properties
captured by annotations. These annotations are also used for field validation,
for constraints and static business rules. A tool FormBuilder (FB) we provide
is capable of generation of rich view forms that integrate all constrains defined in JPA
entity. Currently the tool is used by a large enterprise application in
production where every change to an entity is immediately reflected in the view form without programmer
interaction.


 Based on our experience with the tool we extend the idea to the design model. A
 design model using MD-JPA profile with MD-HBV profile and MD-FB profile can
 generate entity beans with validation and view annotations that can be applied
 to view form generation (and regeneration). Similar idea is also implemented in
 Naked Objects \cite{NakedObj}. Considering
 distributed application frameworks like JSF, PHP, ASP etc. that contain very similar data
 forms, we believe this can propagate on other platforms. All the cross platform
 developers can benefit from transparency of view rich forms.

\section{Profiles}
\label{sec:Profiles}

To flex class models and make them capable of gathering ORM, validation and view
form specification information we use UML profiles. We build them
incrementally so a developer can apply a subset. A popular MDA-based modeling
tool Sparx System's Enterprise Architect \cite{EA} is used to define and applythese UML profiles.

\subsection{ORM Profile}

Implementation of ORM that uses JPA involves mostly annotations of classes,
attributes and associations that are implemented as attributes. In the UML we use stereotypes and tagged
values that extend UML meta-classes. Stereotypes can represent all the JPA
annotations. \fig{JPA}\footnote{Note that a full triangle arrow head should be
used for stereotype meta-class extension according to the UML specification, but we
use a stick arrow head instead because it is not supported by the Enterprise
Architect.} shows a subset of UML profile for JPA relevant to our goal. For full
reference see \cite{UMLProfile:Torres}. \tab{JPA} provides connection between annotations, stereotypes andtheir meanings.



\begin{figure}[!b]
\centering
\includegraphics[width=2.8in]{5-JPA}
\caption{UML profile for JPA - MD-JPA}
\label{fig:JPA}
\end{figure}




\begin{table}[!t]
%% increase table row spacing, adjust to taste
\renewcommand{\arraystretch}{1}
% if using array.sty, it might be a good idea to tweak the value of
% \extrarowheight as needed to properly center the text within the cells
\caption{MD-JPA Stereotypes details }
\label{tab:JPA}
\centering
%% Some packages, such as MDW tools, offer better commands for making tables
%% than the plain LaTeX2e tabular which is used here.
\begin{tabular}{|@{}p{1.45cm}|p{1.2cm}|p{2.9cm}|p{1.65cm}|}
%\hline
%\multicolumn{4}{|c|}{Annotations} \\
\hline
Annotation & Stereotype & Description & Applicability\\
\hline
@Version &
Version &
Optimistic locking &
Integer, Date \\
\hline
@Embedded &
Embedded &
Intrinsic part of owning entity &
T extends Class\\
\hline
@Transient &
Transient &
Not persistent &
*\\
\hline
@Id &
Id &
Primary key &
*\\
\hline
@Lob &
Lob &
Binary data &
Byte\\
\hline
@Enumerated &
Enumerated &
Persist ordinal or Strings &
Enum\\
\hline
@OrderBy &
OrderBy &
Associated collection sort &
Collection\\
\hline
@Temporal &
Temporal &
Database type  \
Date, Time, TimeStamp &
Date\\
\hline
@Column &
Column &
Matching table column &
*\\
\hline
@Entity &
Entity &
Enable JPA for POJO &
Class\\

\hline

\end{tabular}
\end{table}

Having these stereotypes in the model we know more about the meaning of each
attribute. Also {\em entity} stereotype is important, because it reflects the entity name and
enables the JPA persistent services. {\em Column} stereotype provides restrictions that specify how can be a given attribute used. This will
significantly influence the upper layers of an application. Most of the
attributes of a given entity are persistent but some of them may be {\em
transient}. Sometimes we want to logically separate class in more peaces and for that reason we use 
{\em embedded} which physically embeds another class in the context class.
Stereotypes for internal entity management are {\em id} that reflects the
primary key and {\em version} that is used for optimistic locking. These internal management attributes are hidden to the application user.
Associations are in JPA actual attributes that have specified mapping (one/many
to one/many) when we need to order a collection of related classes we do so by
annotating the collection by {\em orderby}. {\em Enumerations} are special type
of data and we can map them by their ordinal or string value. To denote we use a binary data we use {\em lob} annotation. Specification of a date format is
made by a tagged value of {\em temporal} stereotype.

If we look at these stereotypes from another perspective then besides ORM, they
also provide meaning for each attribute. Some specify that attributes are
internal ({\em version, id}), some indicate how to use them ({\em column,
transient}) and some denote the specialization of an attribute ({\em lob, temporal, enumerated}). Could we use this information
also for determination of how to design the human-computer communication? This could tell
us that some attributes are not relevant to a user ({\em id, version}), some of
them can be only displayed, but not modified ({\em transient, insertable,
updatable}) and some are actually required in some special form ({\em nullable, unique, length}). This ORM information allows us to validate what user sends
to the system before we try to persist. Considering usability practices this
also influences the UI that prevents the user from actions that
system denies. Our thinking must be correct because enterprise ORM framework
Hibernate goes a similar direction with HBV that extends the JPA annotations for input validations.

\subsection{Validation Profile}

HBV is based on defined metadata model for JavaBean validation
(JSR 303). Its usage is not much different from the previous JPA. Annotations are
used for entity attributes to specify additional constraints. We implement the
MD-HBV profile that allows us to specify these constrains in design model.
\fig{HBV} provides the pallet of available stereotypes. All of these apply on
attributes. \tab{HBV} provides connection between annotations, stereotypes, meanings
and applicability.





\begin{figure}[!b]
\centering
\includegraphics[width=2.7in]{6-HibernateValidator}
\caption{UML profile for Hibernate Validator - MD-HBV}
\label{fig:HBV}
\end{figure}


\begin{table}[!b]
%% increase table row spacing, adjust to taste
\renewcommand{\arraystretch}{1}
% if using array.sty, it might be a good idea to tweak the value of
% \extrarowheight as needed to properly center the text within the cells
\caption{MD-HBV Stereotypes details}
\label{tab:HBV}
\centering
%% Some packages, such as MDW tools, offer better commands for making tables
%% than the plain LaTeX2e tabular which is used here.
\begin{tabular}{|@{}p{1.4cm}|p{1.1cm}|p{3.3cm}|p{1.4cm}|} 
\hline
%\multicolumn{4}{|c|}{Annotations} \\
%\hline
Annotation & Stereotype & Description & Applicability\\
\hline
@Min &
Min &
Value higher or equal to min &
Num/String\\
\hline
@Max &
Max &
Value less or equal to max &
Num/String\\
\hline
@Length &
Length &
Value length in the range &
String \\
\hline
@Range &
Range &
Value between min and max &
Num/String\\
\hline
@Size &
Size &
Value size is between min and max &
Collection, Map, Array\\
\hline
@Pattern &
Pattern &
Value matches the reg-exp &
String\\
\hline
@Patterns &
Patterns &
Value matches the reg-exps &
String\\
\hline
@Digits &
Digits &
Number with up to  specified integer, fractional digits &
Numeric, String\\
\hline
@CreditCard-Number &
CreditCard-Number &
Match credit card number &
String\\
\hline
@Email &
Email &
Match email &
String\\
\hline
@EAN &
EAN &
EAN (13) or UPC-A code &
String\\
\hline
@Future &
Future &
Future date &
Date\\
\hline
@Past &
Past &
Past date &
Date\\
\hline
@NotNull &
NotNull &
Not null attribute value &
* \\
\hline
@NotEmpty &
NotEmpty &
Not empty attribute value &
* \\
\hline
@AssertFalse &
AssertFalse &
Operation must return true &
Boolean op.\\
\hline
@AssertTrue &
AssertTrue &
Operation must return false &
Boolean op.\\

\hline


\end{tabular}
\end{table}

Validation stereotypes interfere a little bit with the JPA stereotypes and tagged
values ({\em NotNull} vs. {\em nullable} tagged value in JPA, {\em Length} vs.
{\em length} tagged value in JPA), this is a result of new specification that is
delayed in JPA 2. Validation annotations give us very precise constrains on
applied attributes. These determine a lot of meaning of each attribute. We use
{\em length} to specify string length. For numbers we can set {\em range} they
are expected to be in when we can set just a {\em min} or {\em max} value. For
collections and arrays we may set expected {\em size}. For string properties we
may expect {\em email}, {\em credit card number} or 13-digit {\em EAN} codes (or
{\em UPC-A}), we may also need to set a specific {\em pattern}. Some money
attributes will need a validation for {\em digit} amount. Dates may need to be
set for {\em future} or {\em past} (for DOB). All fields might be
checked for being {\em not null} or {\em not empty}.

Having specified JPA entity using JPA and HBV annotations we look at a system
user. He sends data through view forms. If the forms are plain and validation fails, user must re-submit
his data. From the usability perspective we rather design view forms based on
entity attribute constraints. Stereotypes that hold the constraints determine what data
can be persisted and which are wrong. To direct our user, and prevent him
from wrong data submissions, we must reflect all the attribute
stereotypes in the forms. Doing so manually is tedious replication, so
automation is the correct direction. But our plans halt when we want to generate forms with defined
order (reflective API does not warrant attribute order), or when we want use a
string attribute to set a password, use it as http link or render it as HTML.
What if some integer value has a meaning of a color, etc.? We could generate a
form and modify it manually, but if a change to the JPA entity
comes we must to start over. What is necessary to auto-generate 
forms that will have all we need? We explore these in the
following subsection.




\begin{figure}[!t]
\centering
\includegraphics[width=2.7in]{7-FormBuilder}
\caption{UML profile for FormBuilder - MD-FB}
\label{fig:FB}
\end{figure}





\begin{table}[!t]
% % increase table row spacing, adjust to taste
\renewcommand{\arraystretch}{1}
% if using array.sty, it might be a good idea to tweak the value of
% \extrarowheight as needed to properly center the text within the cells
\caption{MD-FB Stereotypes details}
\label{tab:FB}
\centering
% % Some packages, such as MDW tools, offer better commands for making tables %
% than the plain LaTeX2e tabular which is used here.
\begin{tabular}{|@{}p{1.6cm}|p{1.3cm}|p{2.95cm}|@{}p{1.67cm}|}
\hline
%\multicolumn{4}{|c|}{Annotations} \\
%\hline
Annotation & Stereotype & Description & Applicability\\
\hline
@FormOrder  &
FormOrder &
Order in view form &
* \\
\hline
@InputLength &
InputLength &
Input widget length &
*\\
\hline
@JSPattern &
JSPattern &
Java Script regular expr &
String\\
\hline
@Password &
Password &
Password expected &
String\\
\hline
@Link &
Link &
Link expected &
String\\
\hline
@TextArea &
TextArea &
Long text expected &
String\\
\hline
@Color &
Color &
Color expected &
Integer\\
\hline
@Html &
Html &
Html expected &
String\\
\hline
@Ignore &
Ignore &
Do not generate field &
*\\
\hline
@TableColumn &
TableColumn &
Will be used for table &
*\\
\hline
@CompareTo &
CompareTo &
Must satisfy comparison &
*\\
\hline
@Type &
Type &
Type of widget to use &
T extend Class\\
\hline


\end{tabular}
\end{table}


\subsection{Form Builder Profile}
We explored and discussed common practices for ORM and input validation
that are not sufficient for rich form generation. In this section we identify 
the missing elements for view form auto-generation and future re-generation.
The MD-FB profile provides a way to capture all necessary information in design
model.
%We went through a complicated process of specification what our attributes
%should satisfy before they can be persisted. Of course sometimes we need a
%data values dependence to decide it, but these cases will not influence view
%forms for user data. 
%Normally we would manually develop the view forms reflecting what was
%specified in the JPA entity bean. This will be simple for small application but
%not for a large one, mostly when we deal with maintenance. 
%We propose a UML profile, MD-FB, that allows capturing all 
%information for attributes that are
%necessary for complete rich view form generation and future re-generation.
\fig{FB} provides the variety of MD-FB stereotypes. \tab{FB} provides
connection between annotations, stereotypes and its meaning with
applicability.
% We also provide a tool that is capable of such a form
%generation using JPA entity beans with all specified annotations as the input.


The first thing that is missing in the
previous profiles is {\em form order}, i.e., Java Reflective API does not
warrant class field order. This way we can set the form order we expect. Input
fields are capable of restriction on data size but there is also the
visual size of the element ({\em input length}). Some attributes in the entity might be
{\em ignored} for the generation because they are responsible for internal
logic. String attributes may be distinguished for {\em passwords}, {\em text
areas}, {\em html}, {\em http links} or default. Sometimes we interfere Java
regular expressions with JavaScript ones but sometimes not ({\em JSPattern}).
Some complex attribute types will need a component that allows selection, just
imagine  select  menu  for  {\em country},  option  box for  {\em gender}  or
suggestion box for {\em person}, for all of these we set {\em type} to a string
key that will be mapped to a particular view widget. Rarely we want to set a
{\em color}. We also extend the validation to attribute {\em comparison} satisfaction. This will be useful for flight booking where we set two dates one for departure and one for return, the departure date must be before the
return one. Some attributes might be used for table
generation ({\em table column}).


\subsection{Constraints for Model Verification}

The defined profiles bring the advantage to verify validity of the design model.
In order to verify models we specify a set of constraints using Object Constraint Language
(OCL) \cite{OMGUML}.  OCL language defines invariants for stereotypes, which must
be true for all elements. These invariants can be verified in integrated development
environment that supports OCL interpreter. Many OCL constraints for MD-JPA have
been defined in \cite{UMLProfile:Torres}. For structural description, we also
consider \cite{OCL:Warmer,EvolOCL:Kolovos}. Most of stereotypes are
applicable to specific attribute types. We verify these by applying constrains inside each stereotype. For instance for the MD-FB {\em
Password} stereotype we specify OCL in \listing{OCL}. Similarly we apply thesefor many other stereotypes and particular types. For MD-HBV we also specifyconstraints for {\em Length}, maximal and minimal {\em Range}, {\em Size}, etc. Specifically for{\em Asserts} we need to check the return values. For evaluation that {\em
CompareTo} property exists we can use the metamodel. For code implementations
it is possible to have not synchronized JPA and HBV annotations like {\em
Length} and {\em column} attribute {\em length} or {\em NotNull} and 
{\em column} {\em nullable}. In here we can force that they are in sync.



%numbers=left,                  
%numberstyle=\footnotesize,    
%stepnumber=2,                   
%numbersep=5pt,  
\lstset{language=OCL, caption=OCL contraints, label=listing:OCL,
stringstyle=\ttfamily, 
basicstyle=\footnotesize\ttfamily,                      
showspaces=false,   
basewidth={0.55em,0.4em},            
showstringspaces=false,         
showtabs=false,                 
frame=single,	                
tabsize=2,	                
captionpos=b,               
breaklines=true,            
breakatwhitespace=false}
\begin{lstlisting}
context Password: inv self.type.name = 'String'
context Length: inv self.max >= self.min
	and self.min >= 0 and self.type.name = 'String' 
context Size: inv self.max >= self.min and self.min >= 0  
	and self.type.oclIsKindOf(CollectionType)
context AssertTrue: inv 
  self.getReturnParameter().type.name = 'Boolean'
context CompareTo: inv self.type = self.property.type 
	and self.Class.attributes.exists(self.property)
\end{lstlisting}


%\setcounter{figure}{\ref{listing1}} 

% \begin{program}
% \label{listing:OCL}
% \centering
% \includegraphics[width=3.1in]{listing1}
% \caption{OCL contraints}
% \end{program}
% 
% 
%  \begin{program}
%  \label{listing:OCL}
%  \scriptsize
%    
%    \begin{verbatim} 
%  context Password: inv self.type.name = 'String'
%  context Length: inv self.max >= self.min
%  	and self.min >= 0 and self.type.name = 'String' 
%  context Size: inv self.max >= self.min and self.min >= 0  
%  	and self.type.oclIsKindOf(CollectionType)
%  context AssertTrue: inv 
%    self.getReturnParameter().type.name = 'Boolean'
%  context CompareTo: inv self.type = self.property.type 
%  	and self.Class.attributes.exists(self.property)
%  \end{verbatim}
%    \caption{OCL contraints}
%  \end{program}


% Similarly we apply these for many other stereotypes and particular types. For
% MD-HBV we also specify constraints for maximal and minimal range, length, size, etc. stereotypes:
% 
% \lstset{language=OCL, caption=Length / Size contraints, label=DescriptiveLabel}
% \begin{lstlisting}
% context Length: inv self.max >= self.min
% 	and self.min >= 0 and self.type.name = 'String' 
% context Size: inv self.max >= self.min
% 	and self.min >= 0  
% 	and self.type.oclIsKindOf(CollectionType)
% \end{lstlisting}
% 
% 
% 
% Specifically for Asserts we need to check the return values:
% 
% \lstset{language=OCL, caption=Assert contraints, label=DescriptiveLabel}
% \begin{lstlisting}
% context AssertTrue: inv 
%   self.getReturnParameter().type.name = 'Boolean'
% \end{lstlisting}
% 
% For evaluation that compareTo property exists we can use the metamodel which is
% in code world implemented by reflection API or by using reflection pattern.
% 
% \lstset{language=OCL, caption=CompareTo contraints, label=DescriptiveLabel}
% \begin{lstlisting}
% context CompareTo: inv self.type = self.property.type 
% 	and self.Class.attributes.exists(self.property)
% \end{lstlisting}

%For code implementations it is possible to have not synchronized JPA and
%Hibernate Validator annotations like Length and column attribute length or
%NotNull and column nullable. In here we could force that they are in sync.


\subsection{Proposed and Implemented UML Profiles}

We have proposed UML profiles for conventions
libraries for ORM, validation and view form generation. These profiles are
implemented and tested by Enterprise Architect tool where we can import these profiles. At
this point the profiles are incrementally dependent, although we can apply only
MD-JPA, or add MD-HBV and on the top we could add MD-FB. We believe that these
profiles will fill the gap between code programmers and model-driven
development. Programmer can build models that fully reflect what he could write manually, the
advantage is the level of abstraction and its independence. For instance
Hibernate exists also on .NET so this community can gain from our profiles as well. The
principle is platform independent and not limited to web applications. Summaryof the implemented profiles is shown in \fig{Profile}.

\begin{figure}[!t]
\centering
\includegraphics[width=2.6in]{8-Profile}
\caption{UML profiles ORM, Validation and FormBuilder summary}
\label{fig:Profile}
\end{figure}

\begin{figure}[!t]
\centering
\includegraphics[width=3.3in]{9-RichPersonCar4}
\caption{Example of rich design model}
\label{fig:RichPersonCar}
\end{figure}


\subsection{Profiles and FormBuilder}


We could use only ORM profile for its purposes, but
most probably we will need to do validation and build view forms. We already mentioned the disadvantages of manual approach.
Here we look at automation with no complicated learning
curve. Using the defined profiles we completely describe system's static
structure and from the class model generate JPA entities with additional annotations. The
tool we provide takes the generated entities as an input. It also allows
developer to set component fragments that are decorated with the actual entity
attributes and their constraints.  We provide this tool with a complete view
widget library for JSF applications using components from RichFaces, ICEfaces or
JSF. Developer can decide which library to use, modify the widgets or
define his own. The tool has a mapping of entity attributes to each widget so the
developer can modify the mapping. By default he adds the tool with default
configuration to his project and calls the generation on all entities. This
generates him rich view forms reflecting JPA entity beans and their constraints.
Every-time a change to an entity comes, the forms are re-generated. The widget
library also implements client-side validation which provides a fast validation
to user data.




\section{Case Study}
\label{sec:Study}

At the beginning of this paper was provided a motivation example showing what
rich form we want to generate. With the UML profiles, provided for design
models, we can generate the code fragments without any manual intervention. The
example is focused on form generation. Our design model from
\fig{PersonCarSimple} is changed to a model using annotations in \fig{RichPersonCar}.We start to build on the same model and stereotype the model using MD-JPA for
ORM, this enable us to generate code that will use a JPA implementation framework
(Hibernate, OpenJPA or TopLink). On the top we add
MD-HBV for validation, this allows to generate code that will use HBV library. As next we add profile for MD-FB and add stereotypes for the
view form generation.  The generated code captures all necessary details. Once
we are done with entity code generation, the FormBuilder comes in place. We add
it view widgets library and point FormBuilder at chosen entities.






\fig{RichPersonCar} shows the design model with applied profiles. The {\em
Person} class is equivalent to the one from \fig{PersonCarSimple} The {\em Person} entity codesnippet is in \listing{Java}.

\lstset{language=Java,caption=Person entity fragment,label=listing:Java}
\begin{lstlisting}
@Entity
@Table(name = "Person", catalog = "FormBuilder")
public class Person implements java.io.Serializable { 
...
private String name;
private Date born;
...
@Column(name = "name", nullable = false, length = 100)
@NotEmpty
@Length(max = 100)
@FormOrder(1)
public String getName() {return this.name;}
public void setName(String name) {this.name = name;}

@Column(name = "born", nullable = false)
@Temporal(TemporalType.DATE)
@NotEmpty
@Past
@FormOrder(5)
public String getBorn() {return this.born;} 
...
\end{lstlisting}


% \begin{program}
% \label{listing:Java}
% \centering
% \includegraphics[width=3.1in]{listing2}
% \caption{Person entity fragment}
% \end{program}



Using JPA we generate SQL scheme, we can also use business layer generators like
Seam-gen \cite{Seam}. The next step is to generate view like forms, tables,
navigation and security.  View generation process is well described from the behavioral
perspective for the J2EE platform by \cite{MDAForUIM:Wu,EDOC:Gall} or
could also be made by \cite{Seam}.  The improvement comes for view forms. FormBuilder refers to the entity and for each
field is selected a view widget based on field type and annotations that are also used as parameters for the widget. FormBuilder
adds full control over widgets their modification. A view
code snippet for {\em Person} is in \listing{JSF}. All the underlined texts are
supplied by FormBuilder based on the field information. 
The design model in \fig{RichPersonCar} captures all information to generate
the form in \fig{exampleRich}. The {\em Car} form in \fig{carForm} is shown
for completeness.



\lstdefinelanguage{FB} 
{emph={person,Person,inputText,Name,name,true,30,0,100, 
person,name,born,Born,inputDate,name}, 
sensitive=false, 
keywordstyle=\ttfamily,
morecomment=[s][\ttfamily]{<!--}{-->}, 
morecomment=[s][\underbar]{30}, 
morecomment=[s][\underbar]{100}, 
morecomment=[l][\underbar]{"0}, 
morecomment=[s][\underbar]{na}{me}, 
morecomment=[s][\underbar]{bo}{rn}, 
morecomment=[s][\underbar]{Per}{son}, 
emphstyle=\underbar,
morestring=[b]'
} 


\lstset{language=FB,caption=Person view form code,label=listing:JSF}
\begin{lstlisting}
<h:form id="formPerson">
 <util:inputText label="Name"
                  edit="#{edit}"
                 value="#{bean.name}"
              required="true"
                  size="30"    
             minlength="0"     
             maxlength="100"   
                 title="#{text[t.person.name]}"  
              rendered="#{empty nameRender
                          ? 'true' : nameRender}"
                    id="#{prefix}name"/>
 .. 	<!-- other elements 2, 3, 4 -->
 <util:inputDate label="Born"
                  edit="#{edit}"
                 value="#{bean.born}"
              required="true"
                 title="#{text[t.person.born]}"      
              rendered="#{empty bornRender
      		              ? 'true' : bornRender}"
                    id="#{prefix}born"/>
 .. 	<!-- other elements 5, 6 -->
</h:form>
\end{lstlisting}




% \begin{program}
% \label{listing:JSF}
% \centering
% \includegraphics[width=3.1in]{listing3}
% \caption{Person view form code}
% \end{program}



The advantages of the auto-generation were mentioned many times. Human designer
will appreciate it the most once a change request for the entity structure or
field signatures comes. The only thing to do will be to modify the model and
auto-generate the rest of code. No type errors can happen so the code will work
perfect on the first run.
\begin{figure}[!t] \centering \framebox {
\includegraphics[width=2.0in]{10-CarGUI} }
\caption{Generated car view form}
\label{fig:carForm}
\end{figure}

Using the UML profiles on design model for Humam Compter Interaction (HCI) we
have two options. When user has an intention to modify some data, we can auto-generate a rich form specific to
his request in run-time. So the form generation happens on demand. This will with
no doubt simplify the whole process, but on the other hand decrease its
performance. We can pre-generate rich forms for all application users (as done in
the example) and fetch them statically instead.  Static fetch improves the
performance.

Another advantage comes when the targeted application communicates over HTTP, WML
or with standalone clients. The idea of having a rich model that renders a view
in run-time based on the client capabilities also adds benefits. We can also
extend the previous using role-based access control. Some user roles can see
more information and some less, generating the view can also consider visibility
constraints when forms are requested. This idea could be elaborated in similar
manner, but it is over the scope of this paper. In this study we dealt with
aspects for ORM, validation and view form generation. A modeling
tool that has a profile view for each particular aspect would be very useful.
Similar feature for dealing with crosscutting concerns would help in
integrated development environment (IDE) for code development.  




\section{Related work}
\label{sec:Related}

Many publications related to user interface generation exist
\cite{UIGenAndTools:Nichols,ExtUML:Jimerez}. The idea for user interface
generation using an MDA approach\cite{MDATools:Medina,UIEngInMDA:Jespersen,MDAForUIM:Wu} is not new, neither.

We first look at survey
of Model Driven Engineering MDE tools for HCI \cite{MDATools:Medina}. 
MDE developer will benefit from our profiles by capturing
more information for each class attribute. This clarifies
the meaning of a particular attribute and enbables to generate a better
application. Such an improvement helps to avoid unsuccessful form
submissions when user provides wrong data. Based on the fine-grained 
information we can provide user with more usable solutions and better guidance
what data we expect. Authors believe in the need for MDE tools for user
interface design. We propose and implement profiles that can be applied toexisting UML tools so that one can capture more view form specific information.

 Authors of \cite{UIGenAndTools:Nichols} mention that despite a lot of
research, model-based UI tools have not become common, in part because building
models is an abstract process and better results are often achievable by a human designer in
less time. We have illustrated significant improvements to this. Using our
profiles we can generate view forms with UIV. We provide a tool for J2EE that
is successfully used in a large enterprise application for almost two years to simplify its maintenance. This open-source tool experienced more than 700 downloads.
Investigation of the use of MDA for developing HCIs is the goal of
\cite{UIEngInMDA:Jespersen}. Authors discuss the gap between HCI and System
Engineering and mention that one
 may argue that relating design models to the user interface can be considered as a
 mix of presentation and persistence logic. Authors, however, point out that HCI
 concerns cannot easily be described independently from other concerns for a
 system. Our paper builds on this.
The importance of UI auto-generation from PIM to UI code in MDA is
mentioned in \cite{MDAForUIM:Wu}. Behavioral diagrams are used for
transformations in this paper. Our idea extends the richness of the generated
application, from the data input perspective. We have explored some ideas fromthe paper in more details.

Using MD-JPA\cite{UMLProfile:Torres} for ORM mapping is a correct way to fill the gap between
model-driven approach and manual development. Our research goes beyond the UML
profile use for ORM, provides profiles for validation and form generation and
brings the connection of these aspects.
Most of the related work focuses on complete application generation rather than
code fragments that can be optimized for a practical use. For a system
developer,  such a {\em full} MDA tool generation could be very complex and the
result he gets might be different from what he expects. In this paper we focused
rather at improvements of fragments from the whole process which we believe can
help practically in projects. We provide UML profiles that extend existing UML
diagrams rather than inventing new diagrams as used in \cite{ExtUML:Jimerez}


Our previous work \cite{FormB:Cerny} provides the insight from the lower level
perspective. We looked in details on entities, view widget library, mapping
and form generaration introducing our tool. 

Many tools were introduced for the form generation. Some tools reflect its XML
configuration for a form building. IBM XML Forms Generator \cite{XMLGen:Kelly}
is a tool, in the form of eclipse plug-in, that can generate XForms
\cite{XForm} from given XML data instance. It can generate form elements that satisfy type and length constraints
and control types according given XML scheme. Unfortunately XForm technology is
not the only technology used for web forms. Our idea with MD-FB profile and
FormBuilder goes well with this work. FormBuilder allow to build own library of
widgets, these can be in form of XML for XForms.


% An example of a floating figure using the graphicx package.
% Note that \label must occur AFTER (or within) \caption.
% For figures, \caption should occur after the \includegraphics.
% Note that IEEEtran v1.7 and later has special internal code that
% is designed to preserve the operation of \label within \caption
% even when the captionsoff option is in effect. However, because
% of issues like this, it may be the safest practice to put all your
% \label just after \caption rather than within \caption{}.
%
% Reminder: the "draftcls" or "draftclsnofoot", not "draft", class
% option should be used if it is desired that the figures are to be
% displayed while in draft mode.
%
%\begin{figure}[!t]
%\centering
%\includegraphics[width=2.5in]{myfigure}
% where an .eps filename suffix will be assumed under latex, 
% and a .pdf suffix will be assumed for pdflatex; or what has been declared
% via \DeclareGraphicsExtensions.
%\caption{Simulation Results}
%\label{fig_sim}
%\end{figure}

% Note that IEEE typically puts floats only at the top, even when this
% results in a large percentage of a column being occupied by floats.


% An example of a double column floating figure using two subfigures.
% (The subfig.sty package must be loaded for this to work.)
% The subfigure \label commands are set within each subfloat command, the
% \label for the overall figure must come after \caption.
% \hfil must be used as a separator to get equal spacing.
% The subfigure.sty package works much the same way, except \subfigure is
% used instead of \subfloat.
%
%\begin{figure*}[!t]
%\centerline{\subfloat[Case I]\includegraphics[width=2.5in]{subfigcase1}%
%\label{fig_first_case}}
%\hfil
%\subfloat[Case II]{\includegraphics[width=2.5in]{subfigcase2}%
%\label{fig_second_case}}}
%\caption{Simulation results}
%\label{fig_sim}
%\end{figure*}
%
% Note that often IEEE papers with subfigures do not employ subfigure
% captions (using the optional argument to \subfloat), but instead will
% reference/describe all of them (a), (b), etc., within the main caption.


% An example of a floating table. Note that, for IEEE style tables, the 
% \caption command should come BEFORE the table. Table text will default to
% \footnotesize as IEEE normally uses this smaller font for tables.
% The \label must come after \caption as always.
%
%\begin{table}[!t]
%% increase table row spacing, adjust to taste
%\renewcommand{\arraystretch}{1.3}
% if using array.sty, it might be a good idea to tweak the value of
% \extrarowheight as needed to properly center the text within the cells
%\caption{An Example of a Table}
%\label{table_example}
%\centering
%% Some packages, such as MDW tools, offer better commands for making tables
%% than the plain LaTeX2e tabular which is used here.
%\begin{tabular}{|c||c|}
%\hline
%One & Two\\
%\hline
%Three & Four\\
%\hline
%\end{tabular}
%\end{table}


% Note that IEEE does not put floats in the very first column - or typically
% anywhere on the first page for that matter. Also, in-text middle ("here")
% positioning is not used. Most IEEE journals/conferences use top floats
% exclusively. Note that, LaTeX2e, unlike IEEE journals/conferences, places
% footnotes above bottom floats. This can be corrected via the \fnbelowfloat
% command of the stfloats package.



\section{Conclusion}
\label{sec:Conclusion}
In this paper we proposed and implemented UML extension for design models in
the form of UML profile which is a set of stereotypes and tag values. We
discussed the connection between ORM, validation and form generation that all are driven by
design model. We believe that this extension brings a way to fill a gap between
MDA and manual code development. We have also shown that using few more
stereotypes over ORM allows us to generate view forms that fully reflect
constrains placed on the persistent entities. Our work is influenced by
distributed web applications but the idea is general and is useful for standalone
applications as well.


A common practice in application development is to define an entity model and
from there manually code the view forms. This  is  tedious,  error-prone  an  mostly 
not  necessary  if  few more information are captured in the lower layer. The
problem with manual development mostly comes with application maintenance when
entity level is in scope of a backend developer and view level in scope of a
frontend developer. Our approach actually eliminates the need of the frontend
developer in the maintenance cycle for this task. Having the constraints set up
also eliminates the need to manually enforce these in the business layer. This
task can be simply automated using the proposed platform. We use this approach
successfully for almost two years in a large enterprise application and it is
one motivation that made us want to share this idea, which we believe simplifies the application development and maintenance.

This paper extends the idea from our previous work FormBuilder
\cite{FormB:Cerny} that proposed and introduced a tool for view form generation directly from JPA entity beans.
Here we have promoted the concept as a UML profile. With our
extension, UML models can be capable of holding the additional information for
complete data validation and rich view form generation. We provide a tool that
defines new constrains for JPA entity beans. Using the existing model information
and a few new constraints, the tool provides a configurable translation from
entities to view forms.




% conference papers do not normally have an appendix


% use section* for acknowledgement
% \section*{Acknowledgment}
% 
% 
% We would like to thank Michael Jeff Donahoo for his valuable advice and comments.
% We would also like to thank Bozena Mannova for her early feedback that motivated
% our work.
% 
% 




% trigger a \newpage just before the given reference
% number - used to balance the columns on the last page
% adjust value as needed - may need to be readjusted if
% the document is modified later
%\IEEEtriggeratref{8}
% The "triggered" command can be changed if desired:
%\IEEEtriggercmd{\enlargethispage{-5in}}

% references section

% can use a bibliography generated by BibTeX as a .bbl file
% BibTeX documentation can be easily obtained at:
% http://www.ctan.org/tex-archive/biblio/bibtex/contrib/doc/
% The IEEEtran BibTeX style support page is at:
% http://www.michaelshell.org/tex/ieeetran/bibtex/
%\bibliographystyle{IEEEtran}
% argument is your BibTeX string definitions and bibliography database(s)
%\bibliography{IEEEabrv,../bib/paper}
%
% <OR> manually copy in the resultant .bbl file
% set second argument of \begin to the number of references
% (used to reserve space for the reference number labels box)
\begin{thebibliography}{1}

%\bibitem{IEEEhowto:kopka}
%H.~Kopka and P.~W. Daly, \emph{A Guide to \LaTeX}, 3rd~ed.\hskip 1em plus
%  0.5em minus 0.4em\relax Harlow, England: Addison-Wesley, 1999.
\bibitem{MDATools:Medina}
A Survey of Model Driven Engineering Tools for User Interface Design,
Jorge-Luis Perez-Medina, Sophie Dupuy-Chessa, and Agnes Front , Laboratory of Informatics of Grenoble , TAMODIA 2007, LNCS 4849, pp. 84-97, 2007. � Springer-Verlag Berlin Heidelberg 2007
\bibitem{UIGenAndTools:Nichols}
Automatic Interface Generation and Future User Interface Tools, Jeffrey
Nichols, Andrew Faulring, Human-Computer Interaction Institute, Carnegie Mellon
University, 5000 Forbes Ave, Pittsburgh, PA 15213 USA
\bibitem{UIEngInMDA:Jespersen}
Investigating User Interface Engineering in the Model Driven Architecture,
Jacob W Jespersen, Jesper Linvald, IT-University of Copenhagen, Glentevej 67, 2400 NV, Denmark
\bibitem{MDAForUIM:Wu}
An Extended MDA Method for User Interface Modeling and Transformation, Wu J-H, Shin S-S, Chien J-L, Chao WS, Hsieh M-C, Fifteenth European Conference on Information Systems, 2007 

 

\bibitem{OMGUML}
OMG, Unifiend Modeling Language (UML) Version 2.1.2, Meta Object Facility (MOF), Model Driven Architecture (MDA), Object Constraint Language (OCL) Version 2.0,  http://www.omg.org 

\bibitem{MDA:Kleppe}
MDA Explained, Anneke Kleppe, Jos Warmer and  Wim Bast, Addison-Wesley, Boston,
February 2007

\bibitem{OCL:Warmer}
The Object Constraint Language Second
Edition,Jos Warmer and Anneke Kleppe, Addison-Wesley, Boston, August 2003 


\bibitem{EvolOCL:Kolovos}
On the Evolution of OCL for Capturing Structural Constraints in Modelling Languages, Dimitrios S. Kolovos, Richard F. Paige, Fiona A. C. Polack, Department of Computer Science, University of York, UK

\bibitem{FormB:Cerny}
FormBuilder, Tomas Cerny, Michael J. Donahoo, Eunjee Song, CLI ICPC 2008,
Banff, http://sourceforge.net/projects/form-builder/
\bibitem{Req:Nuseibeh}
Requirements Engineering: A Roadmap� Bashar Nuseibeh, Steve Easterbrook,
ACM 2000, Future of Software Engineering Limerick Ireland
\bibitem{ReqEng:Zave}
Four Dark Corners of Requirements Engineering, Pamela Zave, Michael Jackson,
ACM Transactions on Software Engineering and Methodology, Vol. 6, No. 1,
January 1997, Pages 1-30.
\bibitem{Pattern:Beck}
Industrial Experiences with Design Patterns, Kent Beck, Ron Crocker, Gerard
Meszaros, James O. Coplien, Lutz Dominick, Frances Paulisch, John Vlissides, Proceedings of ICSE-18, IEEE, 1996
\bibitem{MDAEeb:Moreno}
An Overview Of Model-Driven Web Engineering and the Mda, Nathalie Moreno, Jose
Romero, Antonio Vallecillo, Web Engineering: Modelling and Implementing
Web Applications, ch.12, Springer, London, 2008
\bibitem{AttrUML:Cepa}
Representing Explicit Attributes in UML, Vasian Cepa, Sven Kloppenburg� 7th
Int'l Workshop on Aspect-Oriented Modeling, Jamaica, 2005
\bibitem{XMLGen:Kelly}
IBM XML Forms Generator, Kevin E. Kelly, Jan Joseph Kratky, Steve Speicher,
Keith Wells, Gee Chia, www.alphaworks.ibm.com/tech/xfg
\bibitem{XForm}
Xforms, standard W3C, http://www.w3.org/MarkUp/Forms/
\bibitem{EDOC:Gall}
EDOC to EJB transformations within MDA, Dariusz Gall, Michal Molenda, Blekigge
Institute of Technology, Sweden
\bibitem{Seam}
JBoss  Seam, www.jboss.com/products/seam


\bibitem{NakedObj}
Naked-objects, development platform www.nakedobjects.org
\bibitem{UMLProfile:Torres}
Towards a UML profile for model-driven object-relational mapping, Alexandre
Torres, Renata Galante and Marcelo S. Pimenta, Instituto de Informatica Universidade Federal do Rio Grande do Sul, Brazil, 2009 XXIII Brazilian Symposium on Software Engineering
\bibitem{JSR:DeMichiel}
JSR 220: Enterprise JavaBeansTM. Version
3.0. Java Persistence API, Linda DeMichiel and Michael Keith, 2006.
http://jcp.org/aboutJava/communityprocess/final/jsr220/index.html
\bibitem{HBV}
Hibernate Validator, open source validation library  for  Hibernate framwework   https://www.hibernate.org/412.html 
\bibitem{EA}
Enterprise Architect, UML design tool, www.sparxsystems.com.au 
\bibitem{ExtUML:Jimerez}
An extension of UML for the modeling of WIMP user interfaces, Jesus M.
Almendros-Jimenez, Luis Iribarne, Information Systems Group, University of
Almeria Spain, Journal of Visual Languages and Computing 19 (2008) 695-720, 13
December 2007
\bibitem{JPA:OpenJPA}
Apache OpenJPA, openjpa.apache.org
\bibitem{JPA:Top}
Oracle TopLink, www.oracle.com/technology/products/ias/toplink/jpa/
\bibitem{JPA:Hibernate}
JBoss Hibernate, www.hibernate.org 


\end{thebibliography}




% that's all folks
\end{document}


